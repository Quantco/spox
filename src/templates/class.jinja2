class _{{ schema.name }}(StandardNode):
    @dataclass
    class Attributes:
    {% if not get_attributes(schema, attr_type_overrides) %}
        pass
    {% else %}{% for attr in get_attributes(schema, attr_type_overrides) %}
        {{ attr.name }}: {{ attr.member_type }}
    {% endfor %}
    {% endif %}  

{% if schema.inputs %}
    class Inputs(ArrowFields):
    {% for input in schema.inputs %}
        {{ input.name }}: {%
            if is_optional(input)
                %}Optional[Arrow]{%
            elif is_variadic(input)
                %}Sequence[Arrow]{%
            else
                %}Arrow{%
            endif %}

    {% endfor %}

{% else %}
    Inputs = NoArrows

{% endif %}
{% if schema.outputs %}
    class Outputs(ArrowFields):
    {% for output in schema.outputs %}
        {{ output.name }}: {%
            if is_optional(output)
                %}Optional[Arrow]{%
            elif is_variadic(output)
                %}Sequence[Arrow]{%
            else
                %}Arrow{%
            endif %}

    {% endfor %}

{% else %}
    Outputs = NoArrows

{% endif %}
{% if type_inference %}
    def infer_output_types(self) -> Dict[str, Type]:
{% filter indent(width=8) %}
        {%+ include type_inference %}
{% endfilter %}

{% endif %}
{% if value_propagation %}
    def propagate_values(self) -> Dict[str, Any]:
{% filter indent(width=8) %}
        {%+ include value_propagation %}
{% endfilter %}

{% endif %}
    op_type = OpType("{{ schema.name }}", "{{ schema.domain }}", {{ schema.since_version }})

    attrs: Attributes
    inputs: {% if schema.inputs %}Inputs{% else %}NoArrows{% endif %}

    outputs: {% if schema.outputs %}Outputs{% else %}NoArrows{% endif %}

