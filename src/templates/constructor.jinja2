def {{ schema.name | get_constructor_name }}({%
for param in schema.inputs %}{%
    if is_optional(param)
        %}{{ param.name }}: Optional[Arrow] = None, {%
    elif is_variadic(param)
        %}{{ param.name }}: Sequence[Arrow] = (), {%
    else
        %}{{ param.name }}: Arrow, {%
endif %}{% endfor %}
    {% if schema.attributes
        %}*, {%
    endif %}{%
if is_variadic(schema.outputs[-1]) and not out_variadic_solution
    %}{{ schema.outputs[-1].name }}_count: int, {% endif %}{%
for attr in schema.attributes.values()
    %}{{ attr.name }}: {{ get_attr_hint_func(attr, attr_type_overrides) }}{%
    if not attr.required %}{%
        if attr.default_value.type
            %} = {{ get_attr_default_func(attr, attr_type_overrides) }}{%
        else %} = None{%
        endif %}{%
    endif %}, {%
endfor %}) -> {{ get_constructor_return(schema) }}:
{% filter indent(width=4) %}
{% if gen_docstrings %}
    r"""
{%+ include "docstring.jinja2" %}
    """
{% endif %}
{%+ include "construct.jinja2" %}
{% endfilter %}