def promote(
    *types: Union[Arrow, numpy.generic, int, float, None]
) -> Tuple[Optional[Arrow], ...]:
    """
    Apply constant promotion and type promotion to given parameters, creating constants and/or casting.

    None-valued parameters are only kept in for ordering.
    """

    promotable = [typ for typ in types if typ is not None]
    if not promotable:
        return typing_cast(Tuple[None, ...], types)

    target_type = result_type(*promotable)

    def _promote_target(obj: Union[Arrow, numpy.generic, int, float, None]) -> Optional[Arrow]:
        if isinstance(obj, (numpy.generic, int, float)):
            return const(numpy.array(obj, dtype=target_type))
        elif isinstance(obj, Arrow):
            return cast(obj, to=target_type)
        assert obj is None
        return obj

    return tuple(typ for typ in map(_promote_target, types))