{% if schema.inputs and is_variadic(schema.inputs[-1]) %}
{% set vararg = schema.inputs[-1].name %}
if isinstance({{ vararg }}, Var):
    {{ vararg }} = ({{ vararg }},) + args
else:
    if args:
        raise ValueError("When the variadic input {{ vararg }} is an iterable, no args should be passed.")
    {{ vararg }} = tuple({{ vararg }})
assert not isinstance({{ vararg }}, Var) and isinstance({{ vararg }}, Sequence)
{% endif %}
{% for attr in attributes %}
    {% if attr.attr_constructor == "AttrGraph" %}
_{{ attr.name }}_subgraph: Graph = subgraph(
    {% if attr.subgraph_solution is not none %}{{ attr.subgraph_solution }}{%
    else %}{{ attr.name }}_input_types{% endif %},
    {{ attr.name }}
)
    {% endif %}
{% endfor %}
return _{{ schema.name }}(
    _{{ schema.name }}.Attributes(
{% for attr in attributes %}
    {% if attr.constructor_type_hint.startswith("Optional[") and attr.constructor_type_hint.endswith("]") %}
        {% set method = ".maybe" %}
    {% else %}
        {% set method = "" %}
    {% endif %}
    {% if attr.attr_constructor == "AttrGraph" %}
        {% set expr = "AttrGraph{}(_{}_subgraph)".format(method, attr.name) %}
    {% else %}
        {% set expr = "{}{}({})".format(attr.attr_constructor, method, attr.name) %}
    {% endif %}
    {{ attr.name }}={{ expr }},
{% endfor %}
    ), _{{ schema.name }}.Inputs(
{% for param in schema.inputs
        %}{{param.name}}={{param.name}}, {%
endfor %}
    ), {%
if schema.outputs and is_variadic(schema.outputs[-1])
    %}out_variadic={{ out_variadic_solution if out_variadic_solution else "{}_count".format(schema.outputs[-1].name) }}, {%
endif %}).outputs{%
if schema.outputs | length <= 1
    %}.{{ schema.outputs[0].name }}{%
else %}._unpack_to_any(){%
endif %}
